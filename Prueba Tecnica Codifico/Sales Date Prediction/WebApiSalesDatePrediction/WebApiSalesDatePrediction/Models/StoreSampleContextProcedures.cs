// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebApiSalesDatePrediction.Models;

namespace WebApiSalesDatePrediction.Models
{
    public partial class StoreSampleContext
    {
        private IStoreSampleContextProcedures _procedures;

        public virtual IStoreSampleContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new StoreSampleContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IStoreSampleContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class StoreSampleContextProcedures : IStoreSampleContextProcedures
    {
        private readonly StoreSampleContext _context;

        public StoreSampleContextProcedures(StoreSampleContext context)
        {
            _context = context;
        }

        public virtual async Task<int> SpAddNewOrderAsync(int? empid, int? shipperid, string shipname, string shipaddress, string shipcity, DateTime? orderdate, DateTime? requireddate, DateTime? shippeddate, decimal? freight, string shipcountry, int? productid, decimal? unitprice, short? qty, decimal? discount, int? cusId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Empid",
                    Value = empid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Shipperid",
                    Value = shipperid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Shipname",
                    Size = 160,
                    Value = shipname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Shipaddress",
                    Size = 240,
                    Value = shipaddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Shipcity",
                    Size = 60,
                    Value = shipcity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Orderdate",
                    Value = orderdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Requireddate",
                    Value = requireddate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Shippeddate",
                    Value = shippeddate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Freight",
                    Precision = 19,
                    Scale = 4,
                    Value = freight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Shipcountry",
                    Size = 60,
                    Value = shipcountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Productid",
                    Value = productid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Unitprice",
                    Precision = 19,
                    Scale = 4,
                    Value = unitprice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Qty",
                    Value = qty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discount",
                    Precision = 4,
                    Scale = 3,
                    Value = discount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Value = cusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [Sales].[SpAddNewOrder] @Empid = @Empid, @Shipperid = @Shipperid, @Shipname = @Shipname, @Shipaddress = @Shipaddress, @Shipcity = @Shipcity, @Orderdate = @Orderdate, @Requireddate = @Requireddate, @Shippeddate = @Shippeddate, @Freight = @Freight, @Shipcountry = @Shipcountry, @Productid = @Productid, @Unitprice = @Unitprice, @Qty = @Qty, @Discount = @Discount, @CusId = @CusId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetClientOrdersResult>> SpGetClientOrdersAsync(int? custId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustId",
                    Value = custId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetClientOrdersResult>("EXEC @returnValue = [Sales].[SpGetClientOrders] @CustId = @CustId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetCustomersOrdersDateResult>> SpGetCustomersOrdersDateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetCustomersOrdersDateResult>("EXEC @returnValue = [Sales].[SpGetCustomersOrdersDate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetEmployeesResult>> SpGetEmployeesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetEmployeesResult>("EXEC @returnValue = [HR].[SpGetEmployees]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetProductsResult>> SpGetProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetProductsResult>("EXEC @returnValue = [Production].[SpGetProducts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetShippersResult>> SpGetShippersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetShippersResult>("EXEC @returnValue = [Sales].[SpGetShippers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
